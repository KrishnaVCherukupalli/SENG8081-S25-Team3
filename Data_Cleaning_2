import yfinance as yf
import pandas as pd
from datetime import date, timedelta

# Set Date Range 
start_date = "2014-01-01"
end_date = (date.today() - timedelta(days=1)).strftime("%Y-%m-%d")

# Download Data 
btc_df = yf.download("BTC-USD", start=start_date, end=end_date, interval="1d")
eth_df = yf.download("ETH-USD", start=start_date, end=end_date, interval="1d")

# Add 'Coin' Column 
btc_df['Coin'] = 'Bitcoin'
eth_df['Coin'] = 'Ethereum'

# Clean Function 
def clean_df(df, coin_label, coin_suffix):
    # 1) Move index to column, drop any old index column
    df = df.reset_index().rename(columns={'index': 'Date'})
    df = df.drop(columns=['index'], errors='ignore')

    # 2) Remove rows with embedded header labels
    df = df[~df.astype(str)
        .apply(lambda row: row.str.fullmatch("Ticker|BTC-USD|ETH-USD", case=False).any(), axis=1)
    ]

    # 3) Fix column names (flatten MultiIndex if necessary)
    cols = []
    for col in df.columns:
        if isinstance(col, tuple):
            base = col[0]
        else:
            base = col
        if base not in ['Date', 'Coin']:
            cols.append(f"{base}_{coin_suffix}")
        else:
            cols.append(base)
    df.columns = cols

    # 4) Final cleanup: drop any leftover NaNs or zeros, remove duplicates
    df = df.dropna()
    df = df[(df[f"Close_{coin_suffix}"] > 0) & (df[f"Open_{coin_suffix}"] > 0)]
    df = df.drop_duplicates(subset=['Date', 'Coin'])

    # 5) Reset the index so it no longer shows up
    df = df.reset_index(drop=True)

    # 6) Print a clean head without index
    print(f"\n✅ {coin_label} Data AFTER Cleaning (no index column):")
    print(df.head(3).to_string(index=False))

    return df

# Apply Cleaning 
btc_df_cleaned = clean_df(btc_df, "Bitcoin", "BTC")
eth_df_cleaned = clean_df(eth_df, "Ethereum", "ETH")

# Save Cleaned CSVs (index=False ensures no index column in file) 
btc_df_cleaned.to_csv("btc_cleaned_final.csv", index=False)
eth_df_cleaned.to_csv("eth_cleaned_final.csv", index=False)
print("\n✅ Cleaned CSVs saved without index columns.")

import pandas as pd

def pandas_clean(df):
    # 1) Standardize column names
    df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
    
    # 2) Ensure 'date' is datetime and sort
    df['date'] = pd.to_datetime(df['date'])
    df = df.sort_values('date').drop_duplicates(subset=['date','coin'])
    
    # 3) Set Date as index and forward‐fill missing business days
    df = df.set_index('date')
    all_bd = pd.date_range(df.index.min(), df.index.max(), freq='B')
    df = df.reindex(all_bd).ffill()
    
    # 4) Find the close column dynamically
    close_cols = [c for c in df.columns if c.startswith('close_')]
    if not close_cols:
        raise KeyError("No close_ column found; available columns: " + ", ".join(df.columns))
    close_col = close_cols[0]
    
    # 5) Compute daily returns and drop outliers > 3σ
    returns = df[close_col].pct_change()
    sigma = returns.std()
    df = df[(returns.abs() <= 3 * sigma)]
    
    # 6) Scale volume to millions if present
    vol_cols = [c for c in df.columns if c.startswith('volume_')]
    for v in vol_cols:
        df[f"{v}_millions"] = df[v] / 1e6
    
    # 7) Reset index back to a column
    df = df.reset_index().rename(columns={'index': 'date'})
    
    return df

#  Apply to your cleaned DataFrames 
btc_final = pandas_clean(btc_df_cleaned)
eth_final = pandas_clean(eth_df_cleaned)

# Preview 
print("=== BTC Final ===")
print(btc_final.head().to_string(index=False))
print("\n=== ETH Final ===")
print(eth_final.head().to_string(index=False))

#  Save 
btc_final.to_csv("btc_final.csv", index=False)
eth_final.to_csv("eth_final.csv", index=False)
